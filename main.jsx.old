// main.jsx
document.addEventListener('DOMContentLoaded', () => {
    // Scene setup
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x87CEEB); // Sky blue background
    
    // Camera setup
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 5, 10);
    camera.lookAt(0, 0, 0);
    
    // Renderer setup
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.shadowMap.enabled = true;
    document.body.appendChild(renderer.domElement);
    
    // Lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
    scene.add(ambientLight);
    
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(50, 200, 100);
    directionalLight.castShadow = true;
    directionalLight.shadow.camera.near = 0.1;
    directionalLight.shadow.camera.far = 500;
    directionalLight.shadow.camera.left = -100;
    directionalLight.shadow.camera.right = 100;
    directionalLight.shadow.camera.top = 100;
    directionalLight.shadow.camera.bottom = -100;
    directionalLight.shadow.mapSize.width = 4096;
    directionalLight.shadow.mapSize.height = 4096;
    scene.add(directionalLight);
    
    // Ground - road and grass
    const roadWidth = 10;
    const roadLength = 100;
    const grassWidth = 50;
    
    // Road
    const roadGeometry = new THREE.PlaneGeometry(roadWidth, roadLength);
    const roadMaterial = new THREE.MeshStandardMaterial({ color: 0x808080 });
    const road = new THREE.Mesh(roadGeometry, roadMaterial);
    road.rotation.x = -Math.PI / 2;
    road.receiveShadow = true;
    scene.add(road);
    
    // Grass
    const grassGeometry = new THREE.PlaneGeometry(grassWidth, roadLength);
    const grassMaterial = new THREE.MeshStandardMaterial({ color: 0x3a5f0b });
    const grassLeft = new THREE.Mesh(grassGeometry, grassMaterial);
    grassLeft.rotation.x = -Math.PI / 2;
    grassLeft.position.x = -(roadWidth / 2 + grassWidth / 2);
    grassLeft.receiveShadow = true;
    scene.add(grassLeft);
    
    const grassRight = new THREE.Mesh(grassGeometry, grassMaterial);
    grassRight.rotation.x = -Math.PI / 2;
    grassRight.position.x = roadWidth / 2 + grassWidth / 2;
    grassRight.receiveShadow = true;
    scene.add(grassRight);
    
    // Car variables
    let carContainer = null;
    const carSpeed = 0.2;
    const rotationSpeed = 0.05;
    const keys = {
        z: false,
        q: false,
        s: false,
        d: false
    };
    
    // Load car model
    const objLoader = new THREE.OBJLoader();
    const textureLoader = new THREE.TextureLoader();
    
    textureLoader.load('green_car/Green_Bubble_Car_0328165252_texture.png', (texture) => {
        objLoader.load('green_car/Green_Bubble_Car_0328165252_texture.obj', (object) => {
            // Apply texture to all children
            object.traverse((child) => {
                if (child.isMesh) {
                    child.material.map = texture;
                    child.material.needsUpdate = true;
                    child.castShadow = true;
                }
            });
            
            // Create container for the car
            carContainer = new THREE.Group();
            
            // Adjust car rotation to face forward
            object.rotation.y = -Math.PI / 2; // Rotate 180 degrees to face forward
            
            // Position and scale the car model
            object.position.set(0, 0, 0);
            object.scale.set(1, 1, 1);
            
            // Add car to container and container to scene
            carContainer.add(object);
            carContainer.position.set(0, 0.5, 0);
            scene.add(carContainer);
        });
    });
    
    // Event listeners for keyboard controls (ZQSD)
    document.addEventListener('keydown', (event) => {
        switch (event.key.toLowerCase()) {
            case 'z': keys.z = true; break;
            case 'q': keys.q = true; break;
            case 's': keys.s = true; break;
            case 'd': keys.d = true; break;
        }
    });
    
    document.addEventListener('keyup', (event) => {
        switch (event.key.toLowerCase()) {
            case 'z': keys.z = false; break;
            case 'q': keys.q = false; break;
            case 's': keys.s = false; break;
            case 'd': keys.d = false; break;
        }
    });
    
    // Handle window resize
    window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    });
    
    // Animation loop
    function animate() {
        requestAnimationFrame(animate);
        
        if (carContainer) {
            // Move car based on key presses
            if (keys.z) {
                carContainer.translateZ(-carSpeed); // Forward
            }
            if (keys.s) {
                carContainer.translateZ(carSpeed); // Backward
            }
            if (keys.q) {
                carContainer.rotation.y += rotationSpeed; // Turn left
            }
            if (keys.d) {
                carContainer.rotation.y -= rotationSpeed; // Turn right
            }
            
            // Update camera to follow car
            const cameraOffset = new THREE.Vector3(0, 5, 10);
            cameraOffset.applyQuaternion(carContainer.quaternion);
            camera.position.copy(carContainer.position).add(cameraOffset);
            camera.lookAt(carContainer.position);
        }
        
        renderer.render(scene, camera);
    }
    
    animate();
});
